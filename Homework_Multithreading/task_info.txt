Написать консольную утилиту для многопоточного скачивания файлов, их последующей обработки и сохранения в локальной
файловой системе. Обработка файлов заключается в генерации превью заданного максимального размера (с сохранением
соотношения сторон) и перекодировании в формат JPEG.

Требования:
• Файл со списком URL указывается параметром в командной строке (по одному URL в каждой строке). Если файл не
существует, выводится сообщение об ошибке.
• Количество потоков, размеры выходных картинок и выходной каталог задаются параметрами в командной строке и имеют
значения по умолчанию (один поток, запись в текущий каталог, размеры 100x100). Если параметры будут зашиты в скрипт,
то будут сняты баллы.
• Если выходной каталог не существует, его нужно автоматически создать.
• Файлы сохраняются под именами, соответсвующими их номеру строки в списке URL (00000.jpeg, 00001.jpeg и т.д.).
Допустимо перезаписывать файлы существующие в каталоге на момент запуска без предупреждения. Конкатенация путей должна
быть платформо независимой (на Windows и Linux разделителями в путях файлов служат разные слеши, и для безопасного
построения путей нужно использовать os.path.join
• Промежуточные (непережатые) файлы всегда держатся в памяти, не нужно сохранять их на диск.
• Невалидные URL, ошибки скачивания файлов и файлы нечитаемых форматов должны корректно обрабатываться (сами файлы
игнорировать, только увеличивать счетчик ошибок).
• В ходе работы в стандартный вывод выводятся сообщения о завершении обработки каждого файла. После завершения в
стандартный вывод выводится статистика количество скачанных файлов, количество скачанных байт, количество запросов
завершившихся с ошибкой, общее время выполнения.
• Должен присутствовать файл requirements.txt со списком зависимостей для установки их через pip
• Unit тесты в этом задании писать не нужно

Пример использования: скачать все файлы из списка urllist.txt в 4 потока, сохранить в каталог
thumbnails в размере 128x128 пикселей.
python download.py urllist.txt --dir thumbnails/ --threads=4 --size=128x128

Подсказки
Для парсинга аргументов командной строки можно использовать модуль argparse из стандартной библиотеки
https://docs.python.org/3/library/argparse.html

Для скачивания файлов можно использовать встроенную библиотеку
urllib https://docs.python.org/3/library/urllib.html

Для обработки изображений можно использовать стороннюю библиотеку
Pillow https://pillow.readthedocs.io/en/5.1.x/

Для управления потоками можно использовать ThreadPool из стандартной библиотеки, для передачи данных между
потоками Queue. Не забывайте про потокобезопасность